import os
import io
import PIL.Image
import asyncio
import nest_asyncio
import textwrap
from pyrogram import Client, filters, idle
from pyrogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Poll,
    CallbackQuery
)
from pyrogram.enums import PollType
import google.generativeai as genai

# ========= Configuration Storage =========
class Config:
    def __init__(self):
        self.AUTHORIZED_USERS = {7145991193}
        self.TARGET_CHANNEL = -1002464876558
        self.PREFIX = "[YOUR POLL]"
        self.GOOGLE_API_KEY = "AIzaSyDgGsCUaG3SaoEZ0R8XYlRneRNNSyJExUU"
        self.EXPLANATION_LINK = "t.me/link" # ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá

config = Config()

# ========= Bot Setup =========
API_ID = 26400657
API_HASH = "c20ddfa6c36b3fb15cabc735c180f738"
BOT_TOKEN = "8071512279:AAFJyCv1J33Z2lh_y_DQ2fuaF8Fzt8O1N7I"
MODEL_NAME = "gemini-1.5-flash"

app = Client("mcq_quiz_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

created_polls = {}

async def is_authorized(user_id):
    return user_id in config.AUTHORIZED_USERS

# ========= Admin Command Handler =========
@app.on_message(filters.command(["01869293233"]))
async def manage_authorized_users(client: Client, message: Message):
    if message.from_user.id not in config.AUTHORIZED_USERS:
        return await message.reply_text("üö´ ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ó‡¶£ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")

    if len(message.command) < 2:
        user_list = ", ".join(f"`{uid}`" for uid in config.AUTHORIZED_USERS)
        return await message.reply_text(
            f"üîê ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ó‡¶£:\n{user_list}\n\n"
            "**‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:**\n"
            "`/01869293233 add <user_id>`\n"
            "`/01869293233 remove <user_id>`"
        )

    action = message.command[1].lower()
    if len(message.command) < 3:
        return await message.reply_text("‚ùå User ID ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§")

    try:
        user_id_to_manage = int(message.command[2])
    except ValueError:
        return await message.reply_text("‚ùå User ID ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")

    if action == "add":
        config.AUTHORIZED_USERS.add(user_id_to_manage)
        await message.reply_text(f"‚úÖ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ `{user_id_to_manage}`-‡¶ï‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    elif action == "remove":
        if user_id_to_manage in config.AUTHORIZED_USERS and len(config.AUTHORIZED_USERS) == 1:
            return await message.reply_text("‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§")
        config.AUTHORIZED_USERS.discard(user_id_to_manage)
        await message.reply_text(f"‚úÖ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ `{user_id_to_manage}`-‡¶ï‡ßá ‡¶∏‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    else:
        await message.reply_text("‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®‡•§ 'add' ‡¶Ö‡¶•‡¶¨‡¶æ 'remove' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# ========= Settings Handlers (Simplified) =========
async def get_settings_markup_and_text():
    text = (
        f"‚öôÔ∏è ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏:\n\n"
        f"‚Ä¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø: `{config.TARGET_CHANNEL}`\n"
        f"‚Ä¢ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏: `{config.PREFIX}`\n"
        f"‚Ä¢ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï: `{config.EXPLANATION_LINK}`"
    )
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®", callback_data="set_channel")],
        [InlineKeyboardButton("üè∑Ô∏è ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®", callback_data="set_prefix")],
        [InlineKeyboardButton("üîó ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®", callback_data="set_link")],
        [InlineKeyboardButton("‚ùå ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="close_settings")]
    ])
    return text, markup

@app.on_message(filters.command(["settings"]))
async def settings_cmd(client: Client, message: Message):
    if not await is_authorized(message.from_user.id): return await message.reply_text("üö´ ‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏")
    settings_text, settings_markup = await get_settings_markup_and_text()
    await message.reply_text(settings_text, reply_markup=settings_markup)

@app.on_callback_query(filters.regex(r"^(set_channel|set_prefix|set_link|close_settings)$"))
async def handle_settings_callbacks(client: Client, callback: CallbackQuery):
    if not await is_authorized(callback.from_user.id): return await callback.answer("üö´ ‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏", show_alert=True)

    action = callback.data

    if action in ["set_channel", "set_prefix", "set_link"]:
        prompts = {
            "set_channel": "üì¢ ‡¶®‡¶§‡ßÅ‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: -100123456789):",
            "set_prefix": "üè∑Ô∏è ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: [QUIZ]):",
            "set_link": "üîó ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: t.me/yourchannel):",
        }
        await callback.message.edit_text(prompts[action])
        await callback.answer()

    elif action == "close_settings":
        await callback.message.delete()
        await callback.answer("‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")

@app.on_message(filters.private & ~filters.command(["start", "help", "mcq", "send", "settings", "01869293233"]))
async def handle_settings_input(client: Client, message: Message):
    if not await is_authorized(message.from_user.id): return
    if not message.reply_to_message or not message.reply_to_message.from_user.is_self: return

    reply_text = message.reply_to_message.text
    original_message = message.reply_to_message

    if "‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø" in reply_text:
        try:
            config.TARGET_CHANNEL = int(message.text.strip())
            await message.reply(f"‚úÖ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: `{config.TARGET_CHANNEL}`")
            await original_message.delete()
        except ValueError:
            await message.reply("‚ùå ‡¶Ö‡¶¨‡ßà‡¶ß ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø! ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    elif "‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏" in reply_text:
        config.PREFIX = message.text.strip()
        await message.reply(f"‚úÖ ‡¶™‡ßç‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßç‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: `{config.PREFIX}`")
        await original_message.delete()
    elif "‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï" in reply_text:
        config.EXPLANATION_LINK = message.text.strip()
        await message.reply(f"‚úÖ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: `{config.EXPLANATION_LINK}`")
        await original_message.delete()


# ========= MCQ Command =========
@app.on_message(filters.command(["mcq"]))
async def mcq_cmd(client: Client, message: Message):
    global created_polls
    if not await is_authorized(message.from_user.id): return await message.reply_text("üö´ ‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏")
    if not message.reply_to_message or not message.reply_to_message.photo: return await message.reply_text("‚ùå ‡¶è‡¶ï‡¶ü‡¶ø MCQ ‡¶õ‡¶¨‡¶ø‡¶§‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®")

    status_msg = await message.reply("üîç ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

    try:
        genai.configure(api_key=config.GOOGLE_API_KEY)
        model = genai.GenerativeModel(MODEL_NAME)

        img_data = await client.download_media(message.reply_to_message, in_memory=True)
        img = PIL.Image.open(io.BytesIO(img_data.getbuffer()))

        prompt = textwrap.dedent("""
            # ‡¶≠‡ßÇ‡¶Æ‡¶ø‡¶ï‡¶æ:
            ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û OCR ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§
            # ‡¶Ü‡¶â‡¶ü‡¶™‡ßÅ‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:
            ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: [‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶õ‡¶æ‡¶°‡¶º‡¶æ]
            ‡¶ï) [‡¶Ö‡¶™‡¶∂‡¶® ‡¶ï]
            ‡¶ñ) [‡¶Ö‡¶™‡¶∂‡¶® ‡¶ñ]
            ‡¶ó) [‡¶Ö‡¶™‡¶∂‡¶® ‡¶ó]
            ‡¶ò) [‡¶Ö‡¶™‡¶∂‡¶® ‡¶ò]
            ‡¶ô) [‡¶Ö‡¶™‡¶∂‡¶® ‡¶ô]- ‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø‡¶§‡ßá
            ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞: [‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶£]
            # ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ:
            ‡ßß.‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶π‡ßÅ‡¶¨‡¶π‡ßÅ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ì ‡¶Ö‡¶™‡¶∏‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶õ‡¶æ‡¶°‡¶º‡¶æ‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶¨‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§
            ‡ß®. **‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶™‡¶ø:** ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶Ö‡¶Ç‡¶∂‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶π‡ßÅ‡¶™‡¶¶‡ßÄ ‡¶Ö‡¶Ç‡¶∂ (‡¶Ø‡ßá‡¶Æ‡¶®: i, ii, iii) ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá **‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á** ‡¶∏‡ßá‡¶á ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶è‡¶ï‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶®‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡¶¨‡ßá ‡¶Ö‡¶™‡¶∏‡¶® ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®‡¶æ‡•§ 
            ‡ß©. ‡¶á‡¶â‡¶®‡¶ø‡¶ï‡ßã‡¶° (‡¶è‡¶á ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶†‡ßã‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá):
            - ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü: `H2O` ‡¶π‡¶¨‡ßá `H‚ÇÇO`
            - ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü: `C3H8` ‡¶π‡¶¨‡ßá `C‚ÇÉH‚Çà`
            - ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü: `a^2` ‡¶¨‡¶æ `a2` ‡¶π‡¶¨‡ßá `a¬≤`
            - ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü: `Ca2+` ‡¶π‡¶¨‡ßá `Ca¬≤‚Å∫`
            - ‡¶ã‡¶£‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü: `10^-3` ‡¶π‡¶¨‡ßá `10‚Åª¬≥`
        """)
        response = await asyncio.to_thread(
            model.generate_content,
            [prompt, img],
        )

        extracted_text = response.text
        question_blocks = []
        current_block = {}
        OPTION_LABELS = ["‡¶ï", "‡¶ñ", "‡¶ó", "‡¶ò", "‡¶ô"]

        for line in extracted_text.split('\n'):
            line = line.strip()
            if not line: continue
            if line.startswith("‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:"):
                if current_block: question_blocks.append(current_block)
                current_block = {"question": line.replace("‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:", "").strip(), "options": {}, "correct": ""}
            elif line.startswith(tuple(f"{label})" for label in OPTION_LABELS)):
                current_block["options"][line[0]] = line[2:].strip()
            elif line.startswith("‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞:"):
                current_block["correct"] = line.replace("‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞:", "").strip()
        
        if current_block: question_blocks.append(current_block)
        created_polls.clear()

        for block in question_blocks:
            try:
                found_labels = sorted(block.get("options", {}).keys())
                if not found_labels: continue

                options_list = [f"{block['options'][label]}" for label in found_labels]
                correct_option_id = found_labels.index(block['correct'])
                question_text = f"{config.PREFIX}\n{block['question']}"
                
                # ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
                poll_explanation = config.EXPLANATION_LINK

                poll_message = await client.send_poll(
                    chat_id=message.chat.id,
                    question=question_text,
                    options=options_list,
                    correct_option_id=correct_option_id,
                    type=PollType.QUIZ,
                    explanation=poll_explanation,
                    is_anonymous=True
                )

                poll_data = {
                    "question": question_text,
                    "options": options_list,
                    "correct_option_id": correct_option_id,
                    "option_labels": found_labels,
                    "explanation": poll_explanation # ‡¶°‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
                }
                created_polls[poll_message.id] = poll_data

                markup = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üóëÔ∏è ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü", callback_data=f"delete_{poll_message.id}"),
                        InlineKeyboardButton("‚úèÔ∏è ‡¶è‡¶°‡¶ø‡¶ü", callback_data=f"edit_{poll_message.id}")
                    ]
                ])
                await poll_message.edit_reply_markup(reply_markup=markup)
                await asyncio.sleep(2)
            except Exception as e:
                await message.reply(f"'{block.get('question', '‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®')}' ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
                continue

        await status_msg.edit_text(f"‚úÖ {len(created_polls)}‡¶ü‡¶ø ‡¶™‡ßã‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\nüì¢ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá /send ‡¶¶‡¶ø‡¶®")
    except Exception as e:
        await status_msg.edit_text(f"‚ùå ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}")

# ========= New Callback Handlers for Edit/Delete =========
@app.on_callback_query(filters.regex(r"^(delete|edit)_(\d+)"))
async def handle_poll_actions(client: Client, callback: CallbackQuery):
    if not await is_authorized(callback.from_user.id):
        return await callback.answer("üö´ ‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏", show_alert=True)

    action = callback.matches[0].group(1)
    message_id = int(callback.matches[0].group(2))

    if action == "delete":
        if message_id in created_polls:
            del created_polls[message_id]
            await callback.message.delete()
            await callback.answer("üóëÔ∏è ‡¶™‡ßã‡¶≤‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=False)
        else:
            await callback.answer("‚ùå ‡¶è‡¶á ‡¶™‡ßã‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶∞ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á‡•§", show_alert=True)

    elif action == "edit":
        if message_id not in created_polls:
            return await callback.answer("‚ùå ‡¶è‡¶á ‡¶™‡ßã‡¶≤‡¶ü‡¶ø ‡¶Ü‡¶∞ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á‡•§", show_alert=True)

        poll_data = created_polls[message_id]
        buttons = []
        for i, label in enumerate(poll_data["option_labels"]):
            buttons.append(
                InlineKeyboardButton(
                    f"{label}",
                    callback_data=f"setcorrect_{message_id}_{i}"
                )
            )

        markup = InlineKeyboardMarkup([buttons[i:i + 2] for i in range(0, len(buttons), 2)])
        await callback.message.edit_text(
            "‚úèÔ∏è ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            reply_markup=markup
        )
        await callback.answer()

@app.on_callback_query(filters.regex(r"^setcorrect_(\d+)_(\d+)"))
async def set_correct_answer(client: Client, callback: CallbackQuery):
    if not await is_authorized(callback.from_user.id):
        return await callback.answer("üö´ ‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏", show_alert=True)

    original_message_id = int(callback.matches[0].group(1))
    new_correct_index = int(callback.matches[0].group(2))

    if original_message_id not in created_polls:
        return await callback.answer("‚ùå ‡¶Æ‡ßÇ‡¶≤ ‡¶™‡ßã‡¶≤‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", show_alert=True)

    await callback.message.delete()
    poll_data = created_polls.pop(original_message_id)
    poll_data["correct_option_id"] = new_correct_index

    try:
        new_poll_message = await client.send_poll(
            chat_id=callback.message.chat.id,
            question=poll_data["question"],
            options=poll_data["options"],
            correct_option_id=poll_data["correct_option_id"],
            type=PollType.QUIZ,
            explanation=poll_data.get("explanation"),
            is_anonymous=True
        )
        created_polls[new_poll_message.id] = poll_data
        markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üóëÔ∏è ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü", callback_data=f"delete_{new_poll_message.id}"),
                InlineKeyboardButton("‚úèÔ∏è ‡¶è‡¶°‡¶ø‡¶ü", callback_data=f"edit_{new_poll_message.id}")
            ]
        ])
        await new_poll_message.edit_reply_markup(reply_markup=markup)
        await callback.answer("‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", show_alert=False)
    except Exception as e:
        await callback.message.reply_text(f"‚ùå ‡¶™‡ßã‡¶≤‡¶ü‡¶ø ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}")

# ========= Other Handlers =========
@app.on_message(filters.command(["send"]))
async def send_to_channel(client: Client, message: Message):
    global created_polls
    if not await is_authorized(message.from_user.id): return await message.reply_text("üö´ ‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏")
    if not created_polls: return await message.reply_text("‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßã‡¶≤ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")

    status_msg = await message.reply(f"üì¢ {config.TARGET_CHANNEL} ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡ßã‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    success_count = 0
    polls_to_send = list(created_polls.values())

    for poll in polls_to_send:
        try:
            await client.send_poll(
                chat_id=config.TARGET_CHANNEL,
                question=poll["question"],
                options=poll["options"],
                correct_option_id=poll["correct_option_id"],
                type=PollType.QUIZ,
                explanation=poll.get("explanation"),
                is_anonymous=True
            )
            success_count += 1
            await asyncio.sleep(2)
        except Exception as e:
            await message.reply(f"'{poll['question']}' ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")
            continue

    await status_msg.edit_text(f"‚úÖ {success_count}/{len(polls_to_send)}‡¶ü‡¶ø ‡¶™‡ßã‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
    created_polls.clear()

@app.on_message(filters.command(["start", "help"]))
async def start_help_command(client: Client, message: Message):
    if not await is_authorized(message.from_user.id): return await message.reply_text("üö´ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶®‡¶®‡•§")
    help_text = textwrap.dedent("""
        **ü§ñ MCQ Quiz Bot Help**
        - `/mcq`: Reply to an image to create polls.
        - `/send`: Send created polls to the channel.
        - `/settings`: Configure the bot.
    """)
    await message.reply_text(help_text)

# ========= Start Bot =========
async def main():
    await app.start()
    print("ü§ñ ‡¶¨‡¶ü ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
    await idle()
    await app.stop()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())